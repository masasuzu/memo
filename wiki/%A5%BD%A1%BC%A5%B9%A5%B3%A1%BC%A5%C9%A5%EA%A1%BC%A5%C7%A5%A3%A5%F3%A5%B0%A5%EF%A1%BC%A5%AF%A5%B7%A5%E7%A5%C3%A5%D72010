* 印象に残った部分のみ記載しています。

! ソースコードリーディングワークショップ2010
: 場所 : 東工大学 キャンパスイノベーションセンター
: 日時 : 2010/01/30

{{toc_here}}

!! ワークショップの趣旨･概要
: 講演者 : 奈良先端科学技術大学院大学 森崎修司氏
!!! 趣旨
* 組織を越えた技術の研鑽
* 共通コンテキスト上での議論
* スキルの確認

!!! ハンズオン内容
* Javaアプレットソースコードの読解
* 差分情報の読解および修正可否の判断

!! 講演: ソースコード理解と勉強会
: 講演者 : 楽天株式会社 吉岡弘隆氏

* プログラマに必要な力
** ソースを読む力
** デバッグ
** テスト

* ソースコードを読む力はプログラマの基礎体力
** 陳腐化しにくい


* コードはHow
* テストはWhat
* ドキュメントはWhy

* コードは読むな理解しろ

* プログラムは思った通りに動かない。書いたとおりに動く

!! ソースコードの理解の仕方、読み方
* 静的/動的、ミクロ/マクロのマトリクスで見ていく

* 静的理解
** 字面での理解
** 規模
** ディレクトリ構造
** 命名規則
* 動的理解
** 動作による理解
** 呼び出し経路
** プロファイリング
** 実行結果

* ミクロ
** 細部の理解
* マクロ
** 全体の理解
** 規模、構造の理解

* コードを理解するためにテストを書く
** 詳細なドキュメントを書くならテストを書く
** テストのないコードは不完全、テストとコードは開き括弧と閉じ括弧の関係

* デバッガはコードを理解するために使う

* 派生開発時にコードが分からない時はテスト書く


!! 講演: コードリーディングテクニック
: 講演者 : 日本IBM 細川宜啓氏

* 人間に誤りを訂正して理解しようとする力がある
** 音読すると間違いに分かる

* 作者の意図を読み取ることが大事

* 速く読むための技術 : コードはおしりから読む
** 元の担当者と違う人が担当した可能性が高い

* 速く読むための技術 : 全体俯瞰=ヘッダコメントに注目する
** ヘッダコメントがないソースは、以下の可能性がある
*** 作成途中
*** プロではない作成は
*** 急いで作った
*** テストコード
** ヘッダコメントを見て全体を俯瞰する

* 速く読むための技術 : ファイル名、変数名に注目
** 命名規則から犯しがちなな誤りを推定できる
** grepで-を検索


* 速く読むための技術 : メトリクスに注目する
** コードの傾向が読み取れる
** コメント率を見る
*** 行単位でお金が発生するような仕事をしている可能性が…

* 全体を俯瞰するための技術 : コードをズームアウトする
** Wordにソースコードを貼り付けてズームアウトすると全体の構造が俯瞰しやすい

* 全体を俯瞰するための技術 : コードをソートする。
** 秀丸のソートマクロでタブを削除してから行ソートする。
** 制御文に注目
** コピペの形跡
** コメントレベルでの条件分岐漏れ
** ロールバリューが正しいか


* 全体を俯瞰するための技術 : 関数名称だけを読む
** 元の担当者と異なる改修者が作成した関数の傾向が分かる

* 全体を俯瞰するための技術 : コメントの記載の癖を読む
** コメント文中の句読点の入り方に注目する
** 句読点が多いコメントは自信がない
*** バグの可能性

!! パネルディスカッション

!!! ツールは何を使ってますか。

* 吉岡氏
** emacs
** gdb
** cscope

* 比嘉氏
** Eclipse
*** デフォルトにSubversion
** レビューは紙で

* 戸島氏
** cscope
** lxr
** vim

* 細川氏
** ラショナル
*** 当たりをつける ← 1500本のソースを見ている
** ボールペン

* 森崎氏
** vi


!!! ソースを読む時のテクニックは?

* 吉岡氏
** 動かしてみる(OS)

* 比嘉氏
** 人の書いたソースはあまり見たくない。
** 本はあまり読まず。優れたオープンソールのコードを読む。
** テストメソッド名とその内容が一致しているべき

* 戸島氏
** ソースコードの全体像のイメージができるまで読む

* 細川氏
** 集中力が大切
*** 切れたことを自覚する
** 頭の中でマインドマップを描く
*** キーワードを印象に残す
** メモリマップを頭に描く

!!! 集中のこつは
* 細川氏
** 前日はしっかり寝る
** 健康に気をつける
** 打ち切ることも大事

* 比嘉氏
** 一日の仕事量を一定にする


!!! レビューの観点はどこを見ればいいのか? (会場)

* どこを見ればいいのかという観点が書かれた本はない。
** Howしかない
** Whatが欲しい
*** 森崎氏と一緒にある団体でレビュー基準を作ります。(細川氏)

* レビューを数回行う
** 重要観点ごとにだけ今回は行うとか
** SPI Japan ← 雑誌?


!!! 全体を見る際に効率的に見る方法

* 吉岡氏
** ディレクトリ構造に注目
** 規模を見る
** README、INSTAL

* 細川氏
** ソースコードの上の方にかかれている昨日が重要
*** 何がしたいのかを注意してみる
** コードから仕様を起こしてみる
*** 実際の仕様とつきあわせて違っていたらバグの可能性

!!! びっくりしたコード
* 吉岡氏
** if文に文字リテラル

* 比嘉氏
** googleのjuiceを見るといい。DIコンテナ

* 戸島氏
** 変数名が極端に短い

* 森崎氏
** 変数名がx0〜x100
** to be implelmented
** コメントに意図を書いて欲しい

* 細川氏
** メソッド丸ごとコメントアウト
** Perlのソースでハートを描く
*** しかもばらすときれいなコード ← 職人芸

!!! その他

* 比嘉氏
** ソースを読んでインプットしたらアウトプットしてみる
*** 他人に読んでもらう。 オープンソースとか

* 細川氏
** インプットは知識、アウトプットは技術
*** アウトプットし続けることで善悪の判断がつくようになる
