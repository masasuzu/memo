! テスト駆動開発者は3週目で死ぬのか
* 和田卓人氏

* 経験者の数は
** TDD経験者 会場の半分

* 3週目の元ネタ
** TDDをYAGNIに厳格に行うなら3イテレーション目に破綻するであろう

!! 第1部ピラミッドをくみ上げる

* エマージェントデザイン
* Emergent Design
** 創発的設計
** P86のピラミッド図

                        創発的設計
             テスト駆動開発  パターン駆動開発
        ユニットテスト  リファクタリング  パターン
     叡智        原則       プラクティス      病理学
                      コードの質

!!! 創発的設計とは
* 変動要因に適応してシステムを進化させるプロセス
** アジャイルプロセスのにおい


!!! 『Code Qualify』
* 解析容易性
** 読みやすさ
* 変更容易性
* 安定性
** きちんと動くこと
* テスト容易性

!! 病理学 Pathologies
* パターン
* リファクタリング

!! 叡智 Wisdom

* 先人の知恵
* FSOSS

!!! 原則 Principle
* 『アジャイルソフトウェア開発の奥義』
** SOLID Principle
* 『達人プログラマ』

* Don't Repeat Yourself
** RoR
* Low of Demeter

!!! Practice
* 日々使う技、こだわり
** スタイル
** 名前
** 道具

* 三本柱
** バージョン管理
*** Subversion
*** CVS
** テスティング
** 自動化
*** ビルド
*** デプロイ
*** 詳しくは小井土さんのセッションにて
** 現代のプログラマが身につける技術

!!! ユニットテスト
* テストの分類
** デベロッパテスト
*** 開発促進
** 顧客テスト
*** 進捗管理
*** Ruby: キューカンバ
** QAテスト
*** 品質保証

!!!! デベロッパテスト
* xUnit

* 理由
** 即座にフィードバック
** 書いたコードに自身を持つため
** これから書くコードに自身を持つため

* どこをテストすべき?
** 『達人プログラマ』
*** ASCII版
** 『システム開発ジャーナル』

* デバッガじゃだめ?
** 『プログラミング作法』
** 後が残らない
** 資産が残らない
** 環境に依存する


!!! リファクタリング
* 振る舞いを変えず内部構造を再構築すること



* 目的
** コードを理解しやすく
** コードを修正しやすく
** コードをシンプルにすることが、シンプル設計への道

* リファクタリングだけが物事を後から改善できる

!!! パターン
* 語彙
* 形式
* 共有

!!! テスト駆動開発

* TDDのこころ
** 1つずつ
** 少しずつ

* 自分が最初のユーザ
* 不安をテストに書く
** あやしいところ

* TDDはテスト技法ではない
** 品質保証は主目的ではない
** 副次的に品質を向上する

!!! パターン駆動開発
* TDDの誤解を解く
** 全てのコードをゼロから書くわけではない
*** 先人の知恵 パターンを利用する
** BDUF ENUF YAGNI
** スタートでもゴールでもある


!!! 創発的設計

* 外部要因
** 市場
** 技術

* 内的要因
** 学び
** よりよいアイデア

* フィードバックや学びを否定しない

!! 第2部 ピラミッドに入る/戻る

!! 現実は厳しい
* スタート地点の違い
** テストがない
** データがすでに入っている
* 量、記憶、変化、プレッシャー


* テストのないコードがたくさん
** 『レガシーコード改善ガイド』

* Edit and Pray

* Cover and Modify

* 『データベースリファクタリング』
** データベースもリファクタリング
** 本気度が高い

!!! テストのパラドックス
* テストが増えるとリファクタリングがやりにくい
* テストが遅い

* 『xUnit Test Pattern』

!!! テストの量と戦う
* 減らす
* 速くする
* 関連を明らかにする

!!! テストの価値の軸
* 早さ
* 実装との距離
* コードの重複率

!!! 自分の記憶力と戦う
* 意図を伝えるコート
* 意図を伝える名前
* Custom Matchers


!! まとめ
* ピラミッド
* TDDと黄金の回転

* TDDはスキル
** 写経
