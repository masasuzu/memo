!! イニシャライザ
!!! スタティックイニシャライザ
クラスが最初に使われたときに実行する。

     static {
         // スタティックイニシャライザ実行
     }

!!! インスタンスイニシャライザ
コンストラクタが実行される直前に実行する。

複数のコンストラクタが存在する場合に便利。

     {
         // インスタンスイニシャライザ実行
     }

! クラスの拡張
!! クラスの継承

 class <サブクラス名> extends <スーパークラス名> {
 }

!! オーバーライド
アノテーションを使用し、スーパークラスに定義されていない場合、コンパイルに失敗する。

     @override
     public void overridingMethod() {
         //
     }


!! オブジェクトクラス

!!! 主なメソッド
||! アクセス修飾子 ||! 戻り値 ||! メソッド      ||! 概要                          ||
|| public          || String  || toString()     || オブジェクトの文字列表現を返す ||
|| public          || boolean || equals(Object) || 等値かどうかを判定             ||
|| public          || int     || hashCode()     || ハッシュコード値を返す         ||
|| protected       || Object  || clone()        || オブジェクトのコピーを返す     ||
|| protected       || void    || finalize()     || ガページコレクタによって呼び出される ||

!! デフォルトコンストラクタ
コンストラクタが定義されなかった場合に呼び出される。
 public Class() {
     super(); //スーパークラスのコンストラクタを呼び出す。
 }

!! 抽象クラスとインターフェースの違い
||                        ||! 抽象クラス                     ||! インターフェース        ||
|| メンバの修飾子         || 自由に記述                      || 記述する必要なし         ||
|| メンバのアクセス修飾子 || 自由に定義可能                  || publicのみ               ||
|| フィールド             || 自由に定義可能                  || 定数のみ定義可能         ||
|| メソッド               || 部分的に抽象メソッドを定義可能  || 抽象メソッドのみ定義可能 ||
|| メソッドのstatic修飾子 || 自由に定義可能                  || 設定不可能               ||
|| 直接インスタンス化     || 不可能                          || 不可能                   ||


! クラスライブラリ

!! Set(HashSet)クラス
* 要素は重複しない
* 順序を保障しない

!!! Setクラスのメソッド
||! メソッド                 ||! 概要                                            ||
|| boolean add(E)            || 要素を追加します。                               ||
|| boolean contains(Object)  || 要素が含まれている場合、trueを返します。         ||
|| Iterator<E> iterator()    || 全ての要素を処理するためのIteratorを取得します。 ||
|| bolean remove(Object)     || 要素を削除します。                               ||

!! Mapクラス
* キーと値をマッピングする。 ← Pythonの辞書型?

! 例外
 try {
     //
 } catch (<Exception Class> <Exception Variable> {
     //
 } finally {
     //
 }
