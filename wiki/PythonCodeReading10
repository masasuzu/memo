! PythonCodeReading10

{{toc_here}}

!! heapqで学ぶヒープの実装とその用途

* 2009/6/16
* 森川哲也氏

!!! 自己紹介
* はてなにいるひと
** http://d.hatena.ne.jp/t2y-1979/

* データ変換研究所
** テキスト抽出を専門とするソフトウェア開発

!!! ヒープについて
* pythonは最小ヒープを実装

* スケジューラの実装に向いている。

!!! heapq.py
* python標準ライブラリ
* 2.3で追加

!!! heapqの使い方

* ヒープの作成方法
** heappush(h, item)： 要素を追加しながらヒープを構成
** heapify(heap) ： リストからヒープを構成
* ヒープから最小値を取得
** heappop(heap) ： a[0] を取り出してヒープを再構成
* ヒープの要素を置換
** heapreplace(heap, item) : 最小値の取得と要素の追加
* 最小/最大範囲を取得
** nsmallest(n, iterable)/nlargest() で範囲を取得

* twistedで使われている
** イベント駆動型ネットワークプログラミングのフレームワーク・ライブラリ

!!! PyMOTW
* 著者： Doug Hellmann
* 目的： 定期的に何かを書く習慣を身につける
* URL： http://www.doughellmann.com/PyMOTW/

* 森川氏が翻訳
** はてブすべし !!


!! 標準ライブラリで学ぶPythonのテスト手法
柴田淳氏

* Pythonの標準モジュールはカバレッジが高い
** よくできている
* 効果的なテストを書くための指標になるかと

!!! テストとは

* 単体テスト  今回はこっち
* 結合テスト

* 関数、メソッド単位で実行
* エラーのテスト

!!! テストの利点
* 開発と平行してバグを発見できる。
** TDD
** 部品レベルで品質保証


* 修正、リファクタリングがしやすい

* 品質管理の自動化

!!! Pythonとテスト

* doctest
** ドキュメンテーション文字列にテストを書く
** テスト用のコードが使い方の説明


* Unittest
** JUnit譲り


!!! Doctest
* cookie.py
** 辞書ライクなCoookieオブジェクトを提供
** httpdヘッダとCookieオブジェクトを相互変換

!!! Doctestの利点
* 手軽
** インタラクティブシェルを張り付けばok
* コードとドキュメントとテストを兼ねる

!!! 欠点
* 冗長
* クラス(特に継承したクラス)に弱い
* 複雑なテストに向かない
** オブジェクト生成を伴うテスト
** データベース、Web


!!! set.py

* set_upメソッドを活用
* テストクラスの継承

!!! テストとカバレッジ
* 3.0で強化
* doctest → unittest
* ほぼ100%

* 作る人にとって
** 効率の向上
** 安心感   !

* 使う人
** クオリティ
** 信頼

!!! まずは
* Doctestから
** なれる
** 完璧を目指さない

* テストコードリーディング
** まずテストコードを読む

* ツール、テスティングフレームワークを使う
** nose.pytest

!! その他
* カバレッジをあげるには
** TDD
