{{toc}}

! ヘッダ
* date:
** 2009/03/11
* place:
** ミラクルリナックス(新橋)
* speaker
** ふるかわとおる

! 概要
* python3.0の利点
** 書きやすさ、読みやすさ
** 言語としての一貫性
* Python3.0の欠点
** 後方互換性がない
*** ユーザが多い
*** 変更点が多い
**** 既存コードが動かなくなる


* 今回のフォーカス
** 3.0でできなくなったこと
*** 2.5.4と3.0.1を比較
** 標準ライブラリを参考
*** テストが通っている

* 標準ライブラリの変更点
** 文字まわり
** 例外まわり

! print文 → print関数

||! 2.x                ||! 3.0                   ||
|| print …            || print(…)              ||
|| print …,           || print(…, end=“ ”)   ||
|| print               || print()                ||
|| print >>stream, …  || print(…, file=stream) ||

* 改行を出力させたくない場合
<<<
print("Hello, world", end=" ")
>>>

! 文字列型の変更
* 2.xでは型と用途が不一致していた

||! 2.xの型 ||! 用途         ||! 3.0の型 ||
|| unicode  || Unicode文字列 || str      ||
|| str      || ASCII文字列   || str      ||
|| str      || バイト列      || bytes    ||


* u" "の廃止
* b".."リテラルの追加

*strとbytesを明に変換
<<<
bytes(s, encodeing="...")
str(b, encodeing="...")
>>>


!! ファイルの扱い
* テキストモードでファイルを開くとread()の戻り値はstr
* バイナリモードでファイルを開くとwrite()にbytesを渡す

!! 例外
* except Exc, var → exept Exc as var

** 2.xのexcept文はややこしい

* raise Exc, arg → rase Exc(arg)

* 文字列例外の廃止
** 2.5非推奨
** 2.6、3.0で廃止

! iter.next() → next(iter)
* イテレータのnext()メソッドの廃止
** 代わりに__next__()メソッド
** 組み込み関数next()
*** 内部で__next__()メソッドを呼んでいる。

! 辞書のkeys() items() values() はリストを返さない
* viewというiterableを返す

! __cmp__() → __lt__()
* __cmp__()による比較を廃止
* 組み込み関数cmp()も廃止
* __lt__()で__cmp__()を代用

!! __cmp__()は <、==、>
* __cmp__(self,other)の戻り値は、....
** self < otherなら不の値
** self == otherなら0
** self > otherなら正の値

!! __lt__() は <
* __lt__(self, other)の戻り値は、.....
** self < otherなら真
** else: 偽

! __getslece__ → __getitem__
* __getitem__に統一

! その他
* file() → open()
* <>演算子 → !=演算子
* __nonzero__ → __bool__
* d.has_key(key) → key in d

! 2to3

* 2to3でのコード移行手順
** まずテストコードを書く
** 2.6 で-3オプションをつける
** 2to3でソースコードを変換
** 後は自力でがんばりましょう

!! 自力で直すところ
* 大小比較には__lt__を定義する必要
* スライスは自力で
* reduce()も自力で
* テキストファイルのエンコード指定

! まとめ
* 3.0に移行しない理由
** 2.xに依存
** 呼び側2.xに依存

* 3.0に移行すべき理由
** 一貫性
** 書きやすさ、読みやすさ
** 2.xに強く依存していない

* 移行ポイント
** ほとんどは局所的に対応でOK
** 文字列に注意
** 2to3を使いましょう

!! その他
* 文字列まわりの処理は重い?
** 3.1で解消?
* 3.0を実用で使っている人は少ないらしい
* djangoは2年以上かけて3.0に移行するらしい
